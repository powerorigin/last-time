				;file E:\project\倒计时插座\Countdown\Countdown.c
				;1	#include "HT46R064B.h"
				;2	#include "key.h"
				;3	#include "led.h"
				;4	#include "CLOCK.h"
				;5	
				;6	
				;7	
				;8	void main()
				include HT46R064B.inc
				@CODE .SECTION 'CODE'
0000	2003	call    STARTSEC
0001	2832	jmp     begin
				@DUMMY .SECTION 'CODE'
0002	2032	call    begin
				STARTSEC:
				STARTUP:
				STARTSEC:
0003	0003	ret
				;9	{
				;10		u16 time = 50000;
				@MAIN .SECTION 'CODE'
				_main:
				begin:
0032	0F50	mov     a, 50H
0033	00EA	mov     time[0], a
0034	0FC3	mov     a, C3H
0035	00EB	mov     time[1], a
				;11	    Key_Init();
0036	2004	call    _Key_Init
				;12		Led_Init();
0037	20F9	call    _Led_Init
				;13		while(time--);
				L2:
				L3:
0038	076A	mov     a, time[0]
0039	00E8	mov     b0_1, a
003A	076B	mov     a, time[1]
003B	00E9	mov     [069H], a
003C	0768	mov     a, b0_1
003D	0A01	sub     a, 1H
003E	00EA	mov     time[0], a
003F	0769	mov     a, [069H]
0040	380A	snz     C
0041	1585	dec     ACC
0042	00EB	mov     time[1], a
0043	10E8	sz      b0_1
0044	2838	jmp     L3
0045	10E9	sz      [069H]
0046	2838	jmp     L3
				;14	    TM_INIT();
0047	22CA	call    _TM_INIT
				;15	    
				;16	   _emi=0;//禁止所有中断
0048	340B	clr     EMI
				;17	   _ctrl1=0x05;//开WDT
0049	0F05	mov     a, 5H
004A	009B	mov     CTRL1, a
				;18	   _wdts=0x07;//WDT 溢出周期选择为2的15次方T WDTCK
004B	0F07	mov     a, 7H
004C	0089	mov     WDTS, a
				;19	   _emi=1;//开启允许中断 
004D	300B	set     EMI
004E	2868	jmp     L6
				;20	    while(1)
				L6:
0068	284F	jmp     L5
				;21	    {
				;22	    	_clrwdt1();//清WDT//20130903
				L5:
004F	0001	clr     wdt
				;23	    	_clrwdt2();
0050	0005	clr     wdt2
				;24	    	if(timeflag == 1)
0051	0772	mov     a, timeflag[0]
0052	0C01	xor     a, 1H
0053	390A	snz     Z
0054	2867	jmp     L8
				;25	    	{
				;26			   timeflag = 0;
0055	1F72	clr     timeflag[0]
				;27			   if(timeSeconds > 0)
0056	0773	mov     a, timeSeconds[0]
0057	0574	or      a, timeSeconds[1]
0058	390A	snz     Z
0059	2860	jmp     L12
005A	0575	or      a, timeSeconds[2]
005B	390A	snz     Z
005C	2860	jmp     L12
005D	0576	or      a, timeSeconds[3]
005E	3D0A	sz      Z
005F	2863	jmp     L10
				;28			   {	
				;29			        led_state();
				L12:
0060	2170	call    _led_state
				;30	    	   		RELAYCONTROL = 1;
0061	3210	set     PA4
				;31			   }
0062	2867	jmp     L8
				;32			   else
				;33			   {
				;34			   		RELAYCONTROL = 0;
				L10:
0063	3610	clr     PA4
				;35			   		Led_On(ALLOFF);
0064	0F00	mov     a, 0H
0065	00D1	mov     bits, a
0066	2105	call    _Led_On
				;36			   					
				;37			   }  
				;38			  
				;39	    	}  
				;40	    	 key_Scan();  
				L11:
				L8:
0067	20C3	call    _key_Scan
				;41	    }
				;42	}
				L1:
0069	2869	jmp     $
				;file E:\project\倒计时插座\Countdown\key.c
				;1	#include "key.h"
				;2	#include "CLOCK.h"
				;3	#include "led.h"
				;4	
				;5	struct KeyStatStruct
				;6	{
				;7	    u8  state;
				;8	 //   u16  time;
				;9	} key_stat[KEY_MUM];
				;10	
				;11	void Key_Init(void)
				;12	{		
				;13		key_stat[0].state = KEY_UP;
				@Key_Init .SECTION 'CODE'
				_Key_Init:
0004	1F6C	clr     key_stat[0]
				;14		key_stat[1].state = KEY_UP;
0005	1F6D	clr     key_stat[1]
				L1:
0006	0003	ret
0007	0000	nop
				;15		
				;16		
				;17		
				;18	}
				;19	
				;20	
				;21	/*********************************************************************
				;22	 * @fn      key_Read
				;23	 *
				;24	 * @brief   key read.
				;25	 *
				;26	 * @param   key - key no
				;27	 *
				;28	 * @return  key status
				;29	 */
				;30	u8 key_Read(u8 key)
				;31	{
				;32	    u8 ret = KEY_UP;
				@key_Read .SECTION 'CODE'
				_key_Read:
006A	1F52	clr     ret[0]
				;33	    
				;34	    switch(key)
006B	10D1	sz      key[0]
006C	286E	jmp     L12
006D	2873	jmp     L6
				L12:
006E	0751	mov     a, key[0]
006F	0C01	xor     a, 1H
0070	3D0A	sz      Z
0071	2878	jmp     L9
0072	287C	jmp     L5
				;35	    {
				;36	    case 0:
				;37	        if(KEY1 == 0)
				L6:
0073	3F90	sz      PA7
0074	287C	jmp     L5
				;38	        {
				;39	            ret = KEY_DOWN;
0075	0F01	mov     a, 1H
0076	00D2	mov     ret[0], a
				;40	        }
				;41	        break;
0077	287C	jmp     L5
				;42	      
				;43	    case 1:
				;44	        if(KEY2 == 0)
				L9:
0078	3C90	sz      PA1
0079	287C	jmp     L5
				;45	        {
				;46	            ret = KEY_DOWN;
007A	0F01	mov     a, 1H
007B	00D2	mov     ret[0], a
				;47	        }
				;48	        break;     
				;49	      
				;50	    default:
				;51	        break;
				;52	    }   
				;53	    return ret;
				L5:
007C	0752	mov     a, ret[0]
				L3:
007D	0003	ret
				;54	}
				;55	/*********************************************************************
				;56	 * @fn      KeyProcCB
				;57	 *
				;58	 * @brief   按键处理回调函数.
				;59	 *
				;60	 * @param   none
				;61	 *
				;62	 * @return  none
				;63	 */
				;64	void KeyProcCB(u8 keys, u8 stat)
				;65	{
				;66	    if(stat == KEY_SHORT)
				@KeyProcCB .SECTION 'CODE'
				_KeyProcCB:
007E	0764	mov     a, stat[0]
007F	0C02	xor     a, 2H
0080	390A	snz     Z
0081	28C2	jmp     L13
				;67	    { 
				;68	        switch(keys)
0082	10E3	sz      keys[0]
0083	2885	jmp     L24
0084	288A	jmp     L18
				L24:
0085	0763	mov     a, keys[0]
0086	0C01	xor     a, 1H
0087	3D0A	sz      Z
0088	289F	jmp     L21
0089	28A7	jmp     L17
				;69	        {
				;70	        //TARIFF KEY  
				;71	        case 0:  if(timeSeconds == 0)
				L18:
008A	10F3	sz      timeSeconds[0]
008B	2896	jmp     L19
008C	10F4	sz      timeSeconds[1]
008D	2896	jmp     L19
008E	10F5	sz      timeSeconds[2]
008F	2896	jmp     L19
0090	10F6	sz      timeSeconds[3]
0091	2896	jmp     L19
				;72	       				 timems = 0;
0092	1F6E	clr     timems[0]
0093	1F6F	clr     timems[1]
0094	1F70	clr     timems[2]
0095	1F71	clr     timems[3]
				;73	                  timeSeconds += 20;
				L19:
0096	0F14	mov     a, 14H
0097	03F3	addm    a, timeSeconds[0]
0098	0F00	mov     a, 0H
0099	13F4	adcm    a, timeSeconds[1]
009A	0F00	mov     a, 0H
009B	13F5	adcm    a, timeSeconds[2]
009C	0F00	mov     a, 0H
009D	13F6	adcm    a, timeSeconds[3]
				;74	         /*         if(timeSeconds%120 <20)
				;75	                  {
				;76	                  	 if(timeSeconds/120 == 1)
				;77	                  	     timeSeconds = 0;
				;78	                  	 else    
				;79	                         timeSeconds = timeSeconds-120-timeSeconds%120;
				;80	                  } 
				;81	                  if(timeSeconds%120 > 100)
				;82	                  {
				;83	                  	timeSeconds = timeSeconds-timeSeconds%120;
				;84	                  }*/
				;85	            break;
009E	28A7	jmp     L17
				;86	        //POWER KEY    
				;87	        case 1:   timeSeconds += 120;  
				L21:
009F	0F78	mov     a, 78H
00A0	03F3	addm    a, timeSeconds[0]
00A1	0F00	mov     a, 0H
00A2	13F4	adcm    a, timeSeconds[1]
00A3	0F00	mov     a, 0H
00A4	13F5	adcm    a, timeSeconds[2]
00A5	0F00	mov     a, 0H
00A6	13F6	adcm    a, timeSeconds[3]
				;88	                  
				;89	            break; 
				;90	              
				;91	        default:
				;92	            break;
				;93	        }
				;94	        if(timeSeconds > 700)
				L17:
00A7	0F00	mov     a, 0H
00A8	0276	sub     a, timeSeconds[3]
00A9	380A	snz     C
00AA	28BD	jmp     L25
00AB	390A	snz     Z
00AC	28C1	jmp     L22
00AD	0F00	mov     a, 0H
00AE	0275	sub     a, timeSeconds[2]
00AF	380A	snz     C
00B0	28BD	jmp     L25
00B1	390A	snz     Z
00B2	28C1	jmp     L22
00B3	0F02	mov     a, 2H
00B4	0274	sub     a, timeSeconds[1]
00B5	380A	snz     C
00B6	28BD	jmp     L25
00B7	390A	snz     Z
00B8	28C1	jmp     L22
00B9	0FBC	mov     a, BCH
00BA	0273	sub     a, timeSeconds[0]
00BB	3C0A	sz      C
00BC	28C1	jmp     L22
				;95	             timeSeconds = 0;                           
				L25:
00BD	1F73	clr     timeSeconds[0]
00BE	1F74	clr     timeSeconds[1]
00BF	1F75	clr     timeSeconds[2]
00C0	1F76	clr     timeSeconds[3]
				;96	        led_state();      	
				L22:
00C1	2170	call    _led_state
				L14:
				L13:
00C2	0003	ret
				;97	    }
				;98	}
				;99	/*********************************************************************
				;100	 * @fn      key_Scan
				;101	 *
				;102	 * @brief   key scan.
				;103	 *
				;104	 * @param   none
				;105	 *
				;106	 * @return  none
				;107	 */
				;108	void key_Scan(void)
				;109	{
				;110	    u8 idx;
				;111	    
				;112	    for(idx = 0; idx < KEY_MUM; idx ++)
				@key_Scan .SECTION 'CODE'
				_key_Scan:
00C3	1F66	clr     idx[0]
00C4	28F4	jmp     L30
				L32:
				L28:
00F3	14E6	inc     idx[0]
				L30:
00F4	0766	mov     a, idx[0]
00F5	0A02	sub     a, 2H
00F6	380A	snz     C
00F7	28C5	jmp     L27
				L26:
00F8	0003	ret
				;113	    {
				;114	        if(KEY_DOWN == key_Read(idx))
				L27:
00C5	0766	mov     a, idx[0]
00C6	00D1	mov     bits, a
00C7	206A	call    _key_Read
00C8	00E5	mov     b0_4, a
00C9	0765	mov     a, b0_4
00CA	0C01	xor     a, 1H
00CB	390A	snz     Z
00CC	28DE	jmp     L31
				;115	        {
				;116	            switch(key_stat[idx].state)
00CD	0F6C	mov     a, 6CH
00CE	0366	add     a, idx[0]
00CF	0081	mov     MP0, a
00D0	0700	mov     a, [00H]
00D1	00E7	mov     CR4, a
00D2	10E7	sz      CR4
00D3	28D5	jmp     L39
00D4	28D6	jmp     L36
				L39:
00D5	28F3	jmp     L28
				;117	            {
				;118	            case KEY_UP:
				;119	                key_stat[idx].state = KEY_DOWN;
				L36:
00D6	0766	mov     a, idx[0]
00D7	0B6C	add     a, 6CH
00D8	00E5	mov     b0_4, a
00D9	0765	mov     a, b0_4
00DA	0081	mov     MP0, a
00DB	0F01	mov     a, 1H
00DC	0080	mov     [00H], a
				;120	                break;         
				;121	        /*    case KEY_DOWN:
				;122	                key_stat[idx].time ++;
				;123	                if(key_stat[idx].time >= KEY_SHORT_TIME)
				;124	                {
				;125	                    KeyProcCB(idx, KEY_SHORT);
				;126	                   
				;127	                }
				;128	                break; */
				;129	                
				;130	            default:
				;131	                break;
				;132	            }
				;133	        }
00DD	28F3	jmp     L28
				;134	        else
				;135	        {    
				;136	        	if(key_stat[idx].state == KEY_DOWN)
				L31:
00DE	0F6C	mov     a, 6CH
00DF	0366	add     a, idx[0]
00E0	0081	mov     MP0, a
00E1	0700	mov     a, [00H]
00E2	00E5	mov     b0_4, a
00E3	0765	mov     a, b0_4
00E4	0C01	xor     a, 1H
00E5	390A	snz     Z
00E6	28EC	jmp     L37
				;137	        	    KeyProcCB(idx, KEY_SHORT);                   
00E7	0766	mov     a, idx[0]
00E8	00E3	mov     keys, a
00E9	0F02	mov     a, 2H
00EA	00E4	mov     stat, a
00EB	207E	call    _KeyProcCB
				;138	        //    key_stat[idx].time = 0;
				;139	            key_stat[idx].state = KEY_UP;
				L37:
00EC	0766	mov     a, idx[0]
00ED	0B6C	add     a, 6CH
00EE	00E5	mov     b0_4, a
00EF	0765	mov     a, b0_4
00F0	0081	mov     MP0, a
00F1	0F00	mov     a, 0H
00F2	0080	mov     [00H], a
				;140	        }
				;141	    }
				;142	}
				;file E:\project\倒计时插座\Countdown\CLOCK.c
				;1	#include "HT46R064B.h"
				;2	#include "key.h"
				;3	#include "CLOCK.h"
				;4	
				;5	#pragma  vector TM_ISR @0x08  //1ms timer 
				;6	
				;7	u8 timeflag;
				;8	u32 timeSeconds;
				;9	u32 timems;
				;10	//u8 lighttime;
				;11	//u8 lightfalg;
				;12	
				;13	
				;14	void TM_INIT()
				;15	{
				;16			_tmr0 = 0x06;             //1ms
				@TM_INIT .SECTION 'CODE'
				_TM_INIT:
02CA	0F06	mov     a, 6H
02CB	008C	mov     TMR0, a
				;17			_tmr0c = 0b10010100;
02CC	0F94	mov     a, 94H
02CD	008D	mov     TMR0C, a
				;18			_t0e=1;//定时/计数器0 中断使能	
02CE	310B	set     T0E
				;19	   	    _t0on=1;//开定时器
02CF	320D	set     T0ON
				;20			_emi=1; 
02D0	300B	set     EMI
				;21			timeSeconds = 0; 
02D1	1F73	clr     timeSeconds[0]
02D2	1F74	clr     timeSeconds[1]
02D3	1F75	clr     timeSeconds[2]
02D4	1F76	clr     timeSeconds[3]
				;22			timems = 0;
02D5	1F6E	clr     timems[0]
02D6	1F6F	clr     timems[1]
02D7	1F70	clr     timems[2]
02D8	1F71	clr     timems[3]
				;23			timeflag = 0;
02D9	1F72	clr     timeflag[0]
				L1:
02DA	0003	ret
				;24		//	lighttime = 0;
				;25		//	lightfalg = 0;	
				;26	
				;27	}
				;28	
				;29	void TM_ISR() 
				;30	{ 
				@@TM_ISR .SECTION 'CODE'
0008	2ADB	jmp     _TM_ISR
				MATH:
				divul4:
0009	1F48	clr     T7
000A	1F49	clr     T8
000B	1F4A	clr     T9
000C	1F4B	clr     T10
000D	0F20	mov     a, 20H
000E	00CC	mov     T11, a
				loop:
000F	340A	clr     C
0010	1AC3	rlc     T2
0011	1AC0	rlc     RH
0012	1AC1	rlc     RM
0013	1AC2	rlc     RU
0014	1AC8	rlc     T7
0015	1AC9	rlc     T8
0016	1ACA	rlc     T9
0017	1ACB	rlc     T10
0018	0748	mov     a, T7
0019	0244	sub     a, T3
001A	0749	mov     a, T8
001B	1245	sbc     a, T4
001C	074A	mov     a, T9
001D	1246	sbc     a, T5
001E	074B	mov     a, T10
001F	1247	sbc     a, T6
0020	380A	snz     C
0021	282F	jmp     endloop
0022	0748	mov     a, T7
0023	0244	sub     a, T3
0024	00C8	mov     T7, a
0025	0749	mov     a, T8
0026	1245	sbc     a, T4
0027	00C9	mov     T8, a
0028	074A	mov     a, T9
0029	1246	sbc     a, T5
002A	00CA	mov     T9, a
002B	074B	mov     a, T10
002C	1247	sbc     a, T6
002D	00CB	mov     T10, a
002E	14C3	inc     T2
				endloop:
002F	17CC	sdz     T11
0030	280F	jmp     loop
0031	0003	ret
				@TM_ISR .SECTION 'CODE'
				_TM_ISR:
02DB	00CF	mov     V2A, a
02DC	070A	mov     a, STATUS
02DD	00D0	mov     V2S, a
				;31	   _tmr0 = 0x06;  
02DE	0F06	mov     a, 6H
02DF	008C	mov     TMR0, a
				;32	   timems++;
02E0	14EE	inc     timems[0]
02E1	3D0A	sz      Z
02E2	14EF	inc     timems[1]
02E3	3D0A	sz      Z
02E4	14F0	inc     timems[2]
02E5	3D0A	sz      Z
02E6	14F1	inc     timems[3]
				;33	   timeflag = 1;
02E7	0F01	mov     a, 1H
02E8	00F2	mov     timeflag[0], a
				;34	   if(timems > 60000)
02E9	0F00	mov     a, 0H
02EA	0271	sub     a, timems[3]
02EB	380A	snz     C
02EC	2AFF	jmp     L7
02ED	390A	snz     Z
02EE	2B1C	jmp     L2
02EF	0F00	mov     a, 0H
02F0	0270	sub     a, timems[2]
02F1	380A	snz     C
02F2	2AFF	jmp     L7
02F3	390A	snz     Z
02F4	2B1C	jmp     L2
02F5	0FEA	mov     a, EAH
02F6	026F	sub     a, timems[1]
02F7	380A	snz     C
02F8	2AFF	jmp     L7
02F9	390A	snz     Z
02FA	2B1C	jmp     L2
02FB	0F60	mov     a, 60H
02FC	026E	sub     a, timems[0]
02FD	3C0A	sz      C
02FE	2B1C	jmp     L2
				;35	   {
				;36	   	  timems = 0;
				L7:
02FF	1F6E	clr     timems[0]
0300	1F6F	clr     timems[1]
0301	1F70	clr     timems[2]
0302	1F71	clr     timems[3]
				;37	   	  if(timeSeconds > 0)
0303	0773	mov     a, timeSeconds[0]
0304	0574	or      a, timeSeconds[1]
0305	390A	snz     Z
0306	2B0D	jmp     L8
0307	0575	or      a, timeSeconds[2]
0308	390A	snz     Z
0309	2B0D	jmp     L8
030A	0576	or      a, timeSeconds[3]
030B	3D0A	sz      Z
030C	2B1C	jmp     L2
				;38	   	    timeSeconds--;
				L8:
030D	0773	mov     a, timeSeconds[0]
030E	0A01	sub     a, 1H
030F	00F3	mov     timeSeconds[0], a
0310	3C0A	sz      C
0311	2B1C	jmp     L2
0312	0774	mov     a, timeSeconds[1]
0313	0A01	sub     a, 1H
0314	00F4	mov     timeSeconds[1], a
0315	3C0A	sz      C
0316	2B1C	jmp     L2
0317	0775	mov     a, timeSeconds[2]
0318	0A01	sub     a, 1H
0319	00F5	mov     timeSeconds[2], a
031A	380A	snz     C
031B	15F6	dec     timeSeconds[3]
				L5:
				L3:
				L2:
031C	0750	mov     a, V2S
031D	008A	mov     STATUS, a
031E	074F	mov     a, V2A
031F	0004	reti
				;39	  /* 	  if( LIGHTDATA == 1 && lightfalg == 0)
				;40	   	  {
				;41		   	  	if( (++lighttime) > 2)
				;42		   	  	{
				;43		   	         timeSeconds = 60;	
				;44		   	         lightfalg = 1;
				;45		   	         lighttime = 0;
				;46		   	  	}
				;47	   	  }  
				;48	   	  else if(LIGHTDATA == 0)
				;49	   	       {	
				;50	   	    		lightfalg = 0;
				;51	                lighttime = 0;
				;52	   	       }  */
				;53	   }
				;54	} 
				;file E:\project\倒计时插座\Countdown\led.c
				;1	#include "HT46R064B.h"
				;2	#include "led.h"
				;3	#include "CLOCK.h"
				;4	
				;5	void Led_Init()
				;6	{
				;7		_pawk = 0x00;
				@Led_Init .SECTION 'CODE'
				_Led_Init:
00F9	1F13	clr     PAWK
				;8		_pac = 0x83;
00FA	0F83	mov     a, 83H
00FB	0091	mov     PAC, a
				;9		_papu = 0x7e;
00FC	0F7E	mov     a, 7EH
00FD	0092	mov     PAPU, a
				;10		_pbc = 0x00;
00FE	1F15	clr     PBC
				;11		_pbpu = 0xff;	
00FF	1F96	set     PBPU
				;12	
				;13		RELAYCONTROL = 0;
0100	3610	clr     PA4
				;14		Led_On(ALLOFF);
0101	0F00	mov     a, 0H
0102	00D1	mov     bits, a
0103	2105	call    _Led_On
				L1:
0104	0003	ret
				;15	}
				;16	
				;17	void Led_On(u8 bits)
				;18	{
				;19		switch(bits)
				@Led_On .SECTION 'CODE'
				_Led_On:
0105	0751	mov     a, bits[0]
0106	00D2	mov     b0_2, a
0107	10D2	sz      b0_2
0108	290A	jmp     L16
0109	2933	jmp     L5
				L16:
010A	0752	mov     a, b0_2
010B	0C01	xor     a, 1H
010C	3D0A	sz      Z
010D	2938	jmp     L6
010E	0752	mov     a, b0_2
010F	0C02	xor     a, 2H
0110	3D0A	sz      Z
0111	293E	jmp     L7
0112	0752	mov     a, b0_2
0113	0C03	xor     a, 3H
0114	3D0A	sz      Z
0115	2944	jmp     L8
0116	0752	mov     a, b0_2
0117	0C04	xor     a, 4H
0118	3D0A	sz      Z
0119	294A	jmp     L9
011A	0752	mov     a, b0_2
011B	0C05	xor     a, 5H
011C	3D0A	sz      Z
011D	294F	jmp     L10
011E	0752	mov     a, b0_2
011F	0C06	xor     a, 6H
0120	3D0A	sz      Z
0121	2954	jmp     L11
0122	0752	mov     a, b0_2
0123	0C07	xor     a, 7H
0124	3D0A	sz      Z
0125	295A	jmp     L12
0126	0752	mov     a, b0_2
0127	0C08	xor     a, 8H
0128	3D0A	sz      Z
0129	2960	jmp     L13
012A	0752	mov     a, b0_2
012B	0C09	xor     a, 9H
012C	3D0A	sz      Z
012D	2966	jmp     L14
012E	0752	mov     a, b0_2
012F	0C0A	xor     a, AH
0130	3D0A	sz      Z
0131	296B	jmp     L15
0132	296F	jmp     L2
				;20		{
				;21		    case ALLOFF: _pa |= 0x6c;
				L5:
0133	0F6C	mov     a, 6CH
0134	0590	orm     a, PA
				;22		                 _pb |= 0x3f;
0135	0F3F	mov     a, 3FH
0136	0594	orm     a, PB
				;23		            break;
0137	296F	jmp     L2
				;24		    case 1: _pa |= 0x60;
				L6:
0138	0F60	mov     a, 60H
0139	0590	orm     a, PA
				;25		            _pb &= 0xf7;
013A	3594	clr     PB3
				;26		            _pb |= 0x30;
013B	0F30	mov     a, 30H
013C	0594	orm     a, PB
				;27		            break;        
013D	296F	jmp     L2
				;28		    case 2: _pa |= 0x60;
				L7:
013E	0F60	mov     a, 60H
013F	0590	orm     a, PA
				;29		            _pb &= 0xef;
0140	3614	clr     PB4
				;30		            _pb |= 0x28;
0141	0F28	mov     a, 28H
0142	0594	orm     a, PB
				;31		            break; 
0143	296F	jmp     L2
				;32		    case 3: _pa |= 0x60;
				L8:
0144	0F60	mov     a, 60H
0145	0590	orm     a, PA
				;33		            _pb &= 0xdf;
0146	3694	clr     PB5
				;34		            _pb |= 0x18;
0147	0F18	mov     a, 18H
0148	0594	orm     a, PB
				;35		            break;       
0149	296F	jmp     L2
				;36		    case 4: _pa &= 0xbf;
				L9:
014A	3710	clr     PA6
				;37		            _pa |= 0x20;
014B	3290	set     PA5
				;38		    		_pb |= 0x38;
014C	0F38	mov     a, 38H
014D	0594	orm     a, PB
				;39		            break;      
014E	296F	jmp     L2
				;40		    case 5: _pa &= 0xdf;
				L10:
014F	3690	clr     PA5
				;41		            _pa |= 0x40;
0150	3310	set     PA6
				;42		    		_pb |= 0x38;
0151	0F38	mov     a, 38H
0152	0594	orm     a, PB
				;43		            break;   
0153	296F	jmp     L2
				;44		    case 6: _pb &= 0xfb;
				L11:
0154	3514	clr     PB2
				;45		            _pb |= 0x03;
0155	0F03	mov     a, 3H
0156	0594	orm     a, PB
				;46		    		_pa |= 0x0c;
0157	0F0C	mov     a, CH
0158	0590	orm     a, PA
				;47		            break;                                 
0159	296F	jmp     L2
				;48		    case 7: _pb &= 0xfd;
				L12:
015A	3494	clr     PB1
				;49		            _pb |= 0x05;
015B	0F05	mov     a, 5H
015C	0594	orm     a, PB
				;50		    		_pa |= 0x0c;
015D	0F0C	mov     a, CH
015E	0590	orm     a, PA
				;51		            break;    
015F	296F	jmp     L2
				;52		    case 8: _pb &= 0xfe;
				L13:
0160	3414	clr     PB0
				;53		            _pb |= 0x06;
0161	0F06	mov     a, 6H
0162	0594	orm     a, PB
				;54		    		_pa |= 0x0c;
0163	0F0C	mov     a, CH
0164	0590	orm     a, PA
				;55		            break;   
0165	296F	jmp     L2
				;56		    case 9: _pa &= 0xfb;
				L14:
0166	3510	clr     PA2
				;57		            _pa |= 0x08;
0167	3190	set     PA3
				;58		    		_pb |= 0x07;
0168	0F07	mov     a, 7H
0169	0594	orm     a, PB
				;59		            break;   
016A	296F	jmp     L2
				;60		    case 10:_pa &= 0xf7;
				L15:
016B	3590	clr     PA3
				;61		            _pa |= 0x04;
016C	3110	set     PA2
				;62		    		_pb |= 0x07;
016D	0F07	mov     a, 7H
016E	0594	orm     a, PB
				L4:
				L2:
016F	0003	ret
				;63		            break;  
				;64		    default : break;                                     
				;65		}
				;66	}
				;67	
				;68	void led_state()
				;69	{
				;70		 u32 temp;
				;71		    temp = timeSeconds%120;
				@led_state .SECTION 'CODE'
				_led_state:
0170	0773	mov     a, timeSeconds[0]
0171	00C3	mov     T2, a
0172	0774	mov     a, timeSeconds[1]
0173	00C0	mov     RH, a
0174	0775	mov     a, timeSeconds[2]
0175	00C1	mov     RM, a
0176	0776	mov     a, timeSeconds[3]
0177	00C2	mov     RU, a
0178	0F00	mov     a, 0H
0179	00C7	mov     T6, a
017A	0F00	mov     a, 0H
017B	00C6	mov     T5, a
017C	0F00	mov     a, 0H
017D	00C5	mov     T4, a
017E	0F78	mov     a, 78H
017F	00C4	mov     T3, a
0180	2009	call    divul4
0181	074B	mov     a, T10
0182	00DA	mov     temp[3], a
0183	074A	mov     a, T9
0184	00D9	mov     temp[2], a
0185	0749	mov     a, T8
0186	00D8	mov     temp[1], a
0187	0748	mov     a, T7
0188	00D7	mov     temp[0], a
				;72		    switch((temp +19)/20)
0189	0F13	mov     a, 13H
018A	0357	add     a, temp[0]
018B	00D3	mov     b0_3, a
018C	0F00	mov     a, 0H
018D	1358	adc     a, temp[1]
018E	00D4	mov     [054H], a
018F	0F00	mov     a, 0H
0190	1359	adc     a, temp[2]
0191	00D5	mov     [055H], a
0192	0F00	mov     a, 0H
0193	135A	adc     a, temp[3]
0194	00D6	mov     [056H], a
0195	0753	mov     a, b0_3
0196	00C3	mov     T2, a
0197	0754	mov     a, [054H]
0198	00C0	mov     RH, a
0199	0755	mov     a, [055H]
019A	00C1	mov     RM, a
019B	0756	mov     a, [056H]
019C	00C2	mov     RU, a
019D	0F00	mov     a, 0H
019E	00C7	mov     T6, a
019F	0F00	mov     a, 0H
01A0	00C6	mov     T5, a
01A1	0F00	mov     a, 0H
01A2	00C5	mov     T4, a
01A3	0F14	mov     a, 14H
01A4	00C4	mov     T3, a
01A5	2009	call    divul4
01A6	0742	mov     a, RU
01A7	00DE	mov     [05EH], a
01A8	0741	mov     a, RM
01A9	00DD	mov     [05DH], a
01AA	0740	mov     a, RH
01AB	00DC	mov     [05CH], a
01AC	0743	mov     a, T2
01AD	00DB	mov     CR3, a
01AE	075B	mov     a, CR3
01AF	055C	or      a, [05CH]
01B0	390A	snz     Z
01B1	29B8	jmp     L38
01B2	055D	or      a, [05DH]
01B3	390A	snz     Z
01B4	29B8	jmp     L38
01B5	055E	or      a, [05EH]
01B6	3D0A	sz      Z
01B7	2A09	jmp     L21
				L38:
01B8	075B	mov     a, CR3
01B9	0C01	xor     a, 1H
01BA	390A	snz     Z
01BB	29C8	jmp     L39
01BC	075C	mov     a, [05CH]
01BD	0C00	xor     a, 0H
01BE	390A	snz     Z
01BF	29C8	jmp     L39
01C0	075D	mov     a, [05DH]
01C1	0C00	xor     a, 0H
01C2	390A	snz     Z
01C3	29C8	jmp     L39
01C4	075E	mov     a, [05EH]
01C5	0C00	xor     a, 0H
01C6	3D0A	sz      Z
01C7	2A19	jmp     L24
				L39:
01C8	075B	mov     a, CR3
01C9	0C02	xor     a, 2H
01CA	390A	snz     Z
01CB	29D8	jmp     L40
01CC	075C	mov     a, [05CH]
01CD	0C00	xor     a, 0H
01CE	390A	snz     Z
01CF	29D8	jmp     L40
01D0	075D	mov     a, [05DH]
01D1	0C00	xor     a, 0H
01D2	390A	snz     Z
01D3	29D8	jmp     L40
01D4	075E	mov     a, [05EH]
01D5	0C00	xor     a, 0H
01D6	3D0A	sz      Z
01D7	2A1D	jmp     L25
				L40:
01D8	075B	mov     a, CR3
01D9	0C03	xor     a, 3H
01DA	390A	snz     Z
01DB	29E8	jmp     L41
01DC	075C	mov     a, [05CH]
01DD	0C00	xor     a, 0H
01DE	390A	snz     Z
01DF	29E8	jmp     L41
01E0	075D	mov     a, [05DH]
01E1	0C00	xor     a, 0H
01E2	390A	snz     Z
01E3	29E8	jmp     L41
01E4	075E	mov     a, [05EH]
01E5	0C00	xor     a, 0H
01E6	3D0A	sz      Z
01E7	2A21	jmp     L26
				L41:
01E8	075B	mov     a, CR3
01E9	0C04	xor     a, 4H
01EA	390A	snz     Z
01EB	29F8	jmp     L42
01EC	075C	mov     a, [05CH]
01ED	0C00	xor     a, 0H
01EE	390A	snz     Z
01EF	29F8	jmp     L42
01F0	075D	mov     a, [05DH]
01F1	0C00	xor     a, 0H
01F2	390A	snz     Z
01F3	29F8	jmp     L42
01F4	075E	mov     a, [05EH]
01F5	0C00	xor     a, 0H
01F6	3D0A	sz      Z
01F7	2A25	jmp     L27
				L42:
01F8	075B	mov     a, CR3
01F9	0C05	xor     a, 5H
01FA	390A	snz     Z
01FB	2A08	jmp     L43
01FC	075C	mov     a, [05CH]
01FD	0C00	xor     a, 0H
01FE	390A	snz     Z
01FF	2A08	jmp     L43
0200	075D	mov     a, [05DH]
0201	0C00	xor     a, 0H
0202	390A	snz     Z
0203	2A08	jmp     L43
0204	075E	mov     a, [05EH]
0205	0C00	xor     a, 0H
0206	3D0A	sz      Z
0207	2A29	jmp     L28
				L43:
0208	2A2D	jmp     L18
				;73			   	    {
				;74			   	        case 0:	if(temp == 0)
				L21:
0209	10D7	sz      temp[0]
020A	2A15	jmp     L22
020B	10D8	sz      temp[1]
020C	2A15	jmp     L22
020D	10D9	sz      temp[2]
020E	2A15	jmp     L22
020F	10DA	sz      temp[3]
0210	2A15	jmp     L22
				;75		    	            		Led_On(ALLOFF);
0211	0F00	mov     a, 0H
0212	00D1	mov     bits, a
0213	2105	call    _Led_On
0214	2A31	jmp     L19
				;76		    	            	else
				;77			   	           		    Led_On(LED1);
				L22:
0215	0F01	mov     a, 1H
0216	00D1	mov     bits, a
0217	2105	call    _Led_On
				;78			   	                break;
0218	2A31	jmp     L19
				;79			   	        case 1: Led_On(LED1);
				L24:
0219	0F01	mov     a, 1H
021A	00D1	mov     bits, a
021B	2105	call    _Led_On
				;80			   	                break;
021C	2A31	jmp     L19
				;81			   	        case 2: Led_On(LED2);
				L25:
021D	0F02	mov     a, 2H
021E	00D1	mov     bits, a
021F	2105	call    _Led_On
				;82			   	                break;
0220	2A31	jmp     L19
				;83			   	        case 3: Led_On(LED3);
				L26:
0221	0F03	mov     a, 3H
0222	00D1	mov     bits, a
0223	2105	call    _Led_On
				;84			   	                break;
0224	2A31	jmp     L19
				;85			   	        case 4: Led_On(LED4);
				L27:
0225	0F04	mov     a, 4H
0226	00D1	mov     bits, a
0227	2105	call    _Led_On
				;86			   	                break;
0228	2A31	jmp     L19
				;87			   	        case 5: Led_On(LED5);
				L28:
0229	0F05	mov     a, 5H
022A	00D1	mov     bits, a
022B	2105	call    _Led_On
				;88			   	                break;
022C	2A31	jmp     L19
				;89			   	        default : _pa |= 0x60;
				L18:
022D	0F60	mov     a, 60H
022E	0590	orm     a, PA
				;90			   	                  _pb |= 0x1c;
022F	0F1C	mov     a, 1CH
0230	0594	orm     a, PB
				;91			   	                break;        
				;92			   	    }
				;93			   	     switch((timeSeconds +19)/120)
				L19:
0231	0F13	mov     a, 13H
0232	0373	add     a, timeSeconds[0]
0233	00D3	mov     b0_3, a
0234	0F00	mov     a, 0H
0235	1374	adc     a, timeSeconds[1]
0236	00D4	mov     [054H], a
0237	0F00	mov     a, 0H
0238	1375	adc     a, timeSeconds[2]
0239	00D5	mov     [055H], a
023A	0F00	mov     a, 0H
023B	1376	adc     a, timeSeconds[3]
023C	00D6	mov     [056H], a
023D	0753	mov     a, b0_3
023E	00C3	mov     T2, a
023F	0754	mov     a, [054H]
0240	00C0	mov     RH, a
0241	0755	mov     a, [055H]
0242	00C1	mov     RM, a
0243	0756	mov     a, [056H]
0244	00C2	mov     RU, a
0245	0F00	mov     a, 0H
0246	00C7	mov     T6, a
0247	0F00	mov     a, 0H
0248	00C6	mov     T5, a
0249	0F00	mov     a, 0H
024A	00C5	mov     T4, a
024B	0F78	mov     a, 78H
024C	00C4	mov     T3, a
024D	2009	call    divul4
024E	0742	mov     a, RU
024F	00E2	mov     [062H], a
0250	0741	mov     a, RM
0251	00E1	mov     [061H], a
0252	0740	mov     a, RH
0253	00E0	mov     [060H], a
0254	0743	mov     a, T2
0255	00DF	mov     CR4, a
0256	075F	mov     a, CR4
0257	0560	or      a, [060H]
0258	390A	snz     Z
0259	2A60	jmp     L44
025A	0561	or      a, [061H]
025B	390A	snz     Z
025C	2A60	jmp     L44
025D	0562	or      a, [062H]
025E	3D0A	sz      Z
025F	2AB1	jmp     L32
				L44:
0260	075F	mov     a, CR4
0261	0C01	xor     a, 1H
0262	390A	snz     Z
0263	2A70	jmp     L45
0264	0760	mov     a, [060H]
0265	0C00	xor     a, 0H
0266	390A	snz     Z
0267	2A70	jmp     L45
0268	0761	mov     a, [061H]
0269	0C00	xor     a, 0H
026A	390A	snz     Z
026B	2A70	jmp     L45
026C	0762	mov     a, [062H]
026D	0C00	xor     a, 0H
026E	3D0A	sz      Z
026F	2AB6	jmp     L33
				L45:
0270	075F	mov     a, CR4
0271	0C02	xor     a, 2H
0272	390A	snz     Z
0273	2A80	jmp     L46
0274	0760	mov     a, [060H]
0275	0C00	xor     a, 0H
0276	390A	snz     Z
0277	2A80	jmp     L46
0278	0761	mov     a, [061H]
0279	0C00	xor     a, 0H
027A	390A	snz     Z
027B	2A80	jmp     L46
027C	0762	mov     a, [062H]
027D	0C00	xor     a, 0H
027E	3D0A	sz      Z
027F	2ABA	jmp     L34
				L46:
0280	075F	mov     a, CR4
0281	0C03	xor     a, 3H
0282	390A	snz     Z
0283	2A90	jmp     L47
0284	0760	mov     a, [060H]
0285	0C00	xor     a, 0H
0286	390A	snz     Z
0287	2A90	jmp     L47
0288	0761	mov     a, [061H]
0289	0C00	xor     a, 0H
028A	390A	snz     Z
028B	2A90	jmp     L47
028C	0762	mov     a, [062H]
028D	0C00	xor     a, 0H
028E	3D0A	sz      Z
028F	2ABE	jmp     L35
				L47:
0290	075F	mov     a, CR4
0291	0C04	xor     a, 4H
0292	390A	snz     Z
0293	2AA0	jmp     L48
0294	0760	mov     a, [060H]
0295	0C00	xor     a, 0H
0296	390A	snz     Z
0297	2AA0	jmp     L48
0298	0761	mov     a, [061H]
0299	0C00	xor     a, 0H
029A	390A	snz     Z
029B	2AA0	jmp     L48
029C	0762	mov     a, [062H]
029D	0C00	xor     a, 0H
029E	3D0A	sz      Z
029F	2AC2	jmp     L36
				L48:
02A0	075F	mov     a, CR4
02A1	0C05	xor     a, 5H
02A2	390A	snz     Z
02A3	2AB0	jmp     L49
02A4	0760	mov     a, [060H]
02A5	0C00	xor     a, 0H
02A6	390A	snz     Z
02A7	2AB0	jmp     L49
02A8	0761	mov     a, [061H]
02A9	0C00	xor     a, 0H
02AA	390A	snz     Z
02AB	2AB0	jmp     L49
02AC	0762	mov     a, [062H]
02AD	0C00	xor     a, 0H
02AE	3D0A	sz      Z
02AF	2AC6	jmp     L37
				L49:
02B0	2AC9	jmp     L17
				;94			   	    {
				;95			   	    	case 0: _pa |= 0x0c;
				L32:
02B1	0F0C	mov     a, CH
02B2	0590	orm     a, PA
				;96			   	    	        _pb |= 0x07;
02B3	0F07	mov     a, 7H
02B4	0594	orm     a, PB
				;97					            break;
02B5	2AC9	jmp     L17
				;98			   	    	case 1: Led_On(LED6);
				L33:
02B6	0F06	mov     a, 6H
02B7	00D1	mov     bits, a
02B8	2105	call    _Led_On
				;99			   	                break;
02B9	2AC9	jmp     L17
				;100			   	        case 2:	Led_On(LED7);
				L34:
02BA	0F07	mov     a, 7H
02BB	00D1	mov     bits, a
02BC	2105	call    _Led_On
				;101			   	                break;
02BD	2AC9	jmp     L17
				;102			   	        case 3: Led_On(LED8);
				L35:
02BE	0F08	mov     a, 8H
02BF	00D1	mov     bits, a
02C0	2105	call    _Led_On
				;103			   	                break;
02C1	2AC9	jmp     L17
				;104			   	        case 4: Led_On(LED9);
				L36:
02C2	0F09	mov     a, 9H
02C3	00D1	mov     bits, a
02C4	2105	call    _Led_On
				;105			   	                break;
02C5	2AC9	jmp     L17
				;106			   	        case 5: Led_On(LED10);
				L37:
02C6	0F0A	mov     a, AH
02C7	00D1	mov     bits, a
02C8	2105	call    _Led_On
				L30:
				L17:
02C9	0003	ret
				;107			   	                break;    
				;108			   	        default : break;        
				;109			   	    }
				;110	}		   	    
				data .SECTION 'DATA'
				RH DB DUP (?)
				RM DB DUP (?)
				RU DB DUP (?)
				T2 DB DUP (?)
				T3 DB DUP (?)
				T4 DB DUP (?)
				T5 DB DUP (?)
				T6 DB DUP (?)
				T7 DB DUP (?)
				T8 DB DUP (?)
				T9 DB DUP (?)
				T10 DB DUP (?)
				T11 DB DUP (?)
				T12 DB DUP (?)
				T13 DB DUP (?)
				V2A DB DUP (?)
				V2S DB DUP (?)
				bits DB DUP (?) ; bits
				b0_2 DB DUP (?)
				b0_3 DB DUP (?)
				temp DB 4 DUP (?) ; temp
				CR3 DB DUP (?)
				CR4 DB DUP (?)
				keys DB DUP (?) ; keys
				stat DB DUP (?) ; stat
				b0_4 DB DUP (?)
				idx DB DUP (?) ; idx
				CR4 DB DUP (?)
				b0_1 DB DUP (?)
				time DB 2 DUP (?) ; time
				key_stat DB DUP (?) ; key_stat
				timems DB 4 DUP (?) ; timems
				timeflag DB DUP (?) ; timeflag
				timeSeconds DB 4 DUP (?) ; timeSeconds
